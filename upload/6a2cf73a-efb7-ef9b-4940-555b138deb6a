1.(task 6 - cơ bản) Ý nghĩa các folder file:
	- metadata: (View layer)
		+ acldefs.php - Xử lý phân quyền cho các button trên giao diện (thường không dùng).
		+ additionalDetails.php - Thông tin ngắn gọn khi user click vào nút "i" của record ở listview.
		+ metafiles.php - định vị những file quy định giao diện
		+ popupdefs.php - quy định các field và column của popup view.
		+ quickcreatedef.php - thiết kế màn hình quickcreate.
		+ searchdef.php - Thiết kế màn hình search.
		+ searchfield - quy định cách query của từng field dùng để search.
	- clients: Quy định giao diện trên các platform khác, vd mobile.
	- Dashlet: Quy định giao diện của các dashlet.
	- tpls: Chứa các file tùy biến giao diện.
	- Menu.php: Tạo các shortcut ở thẻ Actions (dưới các menu tabs). 
	Nếu không có file này thì mặc định sẽ có 2 tab là “Create <tên module>” và “view <tên module>”.
	- Popup.php: tạo popup những record của module liên quan, nó sử dụng file popup_picker.html và <module>/metadata/popupdef.php để hiển thị popup.
	- Popup_picker.html: dùng để hiển thị popup.

2.(task 6 - cơ bản) File vardefs:
	- vname : label
	- type:
		+ relate:
		+ datetime:
		+ bool:
		+ enum: 
		+ assigned_user_name: link to user
		+ varchar:
		+ link:
	- table: ???
	- dbtype: dùng nếu ko có type nào tương ứng.
	- reportable: cho phép hiển trong report hay không?
	- Unified_search: cho phép field có được dùng trong global search hay không.
	- rname: tên field trong rela module tương ứng.
	- id_name: chứa id của record trong relate module.
	- source: db hoặc non-db
	- sort_on: sort trong listview
	- fields: khai cáo field gồm nhiều fields khác.
	- importable: mặc định là True
		+ False
		+ required:
	- Options: 
		+ khai báo tên list muốn hiện cho người dùng chọn.
		+ list được khai báo trong .include/language/..
	- Relationship: tên của relationship đã được định nghĩa.
	
	* Index: Xét dupplicate.
	* Relationships:
			'calls_assigned_user' => array(
			'lhs_module'		=> 'Users',
			'lhs_table'			=> 'users',
			'lhs_key'			=> 'id',
			'rhs_module'		=> 'Calls',
			'rhs_table'			=> 'calls',
			'rhs_key'			=> 'assigned_user_id',
			'relationship_type'	=> 'one-to-many'

3.(task 12 - cơ bản)	Tìm hiểu cơ chế đa ngôn ngữ trên Sugar:
	- Cài đặt đa ngôn ngữ trên Sugar:
	- Ngôn ngữ toàn cục, ngôn ngữ cục bộ
		+ Ngôn ngữ toàn cục: gồm những từ khóa dùng chung trong cả hệ thống Sugar, được quy định trong folder SugarCE/include/language.
		+ Ngôn ngữ cục bộ: gồm những từ khóa liên quan đến các module, được quy định trong folder SugarCE/modules/languages.
	- Cách dịch ngôn ngữ:
		+ Dịch bằng tay: truy cập vào file ngôn ngữ tương ứng (vd muốn sửa ngôn ngữ tiếp Việt của module Accounts thì vào file vi_VI.lang.php trong language của module Accounts, sửa các từ tiếng Việt tương ứng với các label.
		+ Dịch thông qua module: Vào Admin/Studio, chọn module muốn sửa, chọn label, chọn ngôn ngữ muốn dịch, sau đó sửa lại ngôn ngữ dịch tương ứng với các label.
	- Cách lấy label của một module bất kỳ:
		$account_lang = return_module_language($GLOBALS['current_language'], 'Administration') ;
		
		Biến $account_lang sẽ chứa các label của ngôn ngữ đó trên một array, để lấy label ta truy cập đến key của label đó:
		Vd: $account_lang[‘LBL_NAME’]
	- Cách lấy language string ở một ngôn ngữ bất kỳ:
	Trong Sugar, để truy cập vào ngôn ngữ hiện tại ta dùng các biến $mod_string, $mod_list_strings, $app_strings, $app_list_strings.
	Để lấy được language string của các ngôn ngữ khác, ta dùng các hàm:
	
		// Lấy mod_list_strings trong ngôn ngữ en_us
		$langString = return_app_list_strings_language('en_us');
		// Sử dụng
		echo $langString['gender_dom'];

		// Lấy app_strings trong ngôn ngữ en_us
		$langString = return_application_language('en_us');
		// Sử dụng
		echo $langString['LBL_NAME'];

		// Lấy mod_list_strings trong ngôn ngữ en_us của module Students
		$langString = return_mod_list_strings_language('en_us', 'Students');
		// Sử dụng
		echo $langString['student_type_dom'];

		// Lấy mod_strings trong ngôn ngữ en_us của module Students. Tham số thứ 3 là refesh, nếu = true thì sẽ lấy language trong code, không lấy trong cache
		$langString = return_module_language('en_us', 'Students', true);
		// Sử dụng
		echo $langString['LBL_STUDENT_ID'];

4.(task 15 - cơ bản) Security groups:
	- Additive Rights: check -  Nếu user được cấp nhiều quyền trên cùng một module thì được hưởng quyền cao nhất. Uncheck thì thấp nhất.
	- Strict Right: Nếu một user thuộc một group thì chỉ được những quyền của group đó trên những record được assign.
	- New User Group Popup: Khi tạo một user thì hiện một popup yêu cầu chọn group cho user đó.
	- User Role Precedence: Check – nếu user vừa được gán role vừa trong một group thì ưu tiên quyền trên role gán trực tiếp. Uncheck thì ưu tiên quyền của group.
	- Filter User List: Nếu không phải admin thì chỉ được assign một record cho user trong cùng group.
	- Use Popup Select: Khi tạo một record thì hiện popup yêu cầu assign group cho record đó.
	- Default group for new records: cài đặt những group mặc định khi tạo mới các record.

	
5.(task 2 - nâng cao) Ajax:
	- Vào file editviewdef.php, include một file js.
	- Tạo file js và file php xử lý.
	*Lưu ý: thêm đoạn "sugar_body_only=true" vào url trong ajax.
	
6.(task 3 - nâng cao) Logic hooks:
	- Dùng để gán một function cho một action nào đó, khi action chạy thì function cũng được thực thi.
	- Logic hooks được định nghĩa trong ./custom/, tách biệt với code của Sugar nên dễ dàng upgrade.
		+ ./custom/modules/<tên module>/logic_hooks.php - Logic hooks cho module.
		+ ./custom/modules/logic_hooks.php - Logic hooks toàn cục.
	**Note:
		+ Không dùng dấu & cho biến $bean.
		+ Không có hooks cho giao diện ListView, DetailView, EditView. Ta phải định nghĩa hooks thông qua cả 'process_record' và 'after_retrive' logic hooks và kiểm tra $_REQUEST.
		+ Muốn lấy giá trị cũ và mới ta dùng fetch_row để kiểm tra:
			if ($bean->fetched_row['{field}'] != $bean->{field})
				{
					//logic
				}
	- Các loại logic hooks:
		+ after_ui_frame: Sau khi màn hình được gọi và trước khi footer hiện ra.
		+ after_footer_frame: Sau khi footer hiện ra.
		+ server_round_trip: Được gọi khi một page được shutdown.
		+ after_entry_point: chạy khi có một request nào đó.
		
		+ before_delete/ after_delete: Trước khi xóa
		+ before_restore/ after_restore: trước khi được undelete.
		+ after_retrive: trước khi một record được lấy lên bằng hàm SugarBean::retrieve(), không có tác dụng với new record.
		+ before_save/ after_save: trước khi save 1 record.
		+ process_record: Gọi ngay trước khi database thực thi truy vấn, dùng để thêm values trước khi hiển thị lên ListView. 
		Event này không chạy với EditView và DetailView.
		+ before_relationship_add/ after_relationship_add: Gọi khi tạo một rela giữa 2 modules.
		+ before_relationship_delete/ after_relationship_delete: Gọi khi xóa một rela giữa 2 modules.
		+ handle_exception: Gọi khi có một exception được gọi.
		
		+ before_logout/ after_logout: Gọi khi user logs out khỏi hệ thống.
		+ before_login: Trước khi login
		+ login_failed: Khi login không được, sugar yêu cầu thử lại.
		
7.(task 4 - nâng cao) Entry point:
	- Main entry points:
		+ ./cron.php - thực thi Sugar Scheduler theo định kỳ.
		+ ./index.php - entry mặc định của Sugar.
		+ ./install.php - entry dùng để cài đặt Sugar.
		+ ./soap.php - Entry point for v1 SOAP Calls.
		+ ./service/{api version}/soap.php - Entry point for v2-v4_1 SOAP calls.
		+ ./service/{api version}/rest.php - Entry point for v2-v4_1 REST calls.
			*NOTE:	- SOAP là giao thức giao tiếp sử dụng các XML doccument làm thông điệp gửi nhận dữ liệu.
					- REST một loại giao thức truyền dữ liệu, như SOAP.
	- Entry Point or Action?
		+ Giống nhau: Dùng để thao tác với Sugar khi ta nằm ngoài hệ thống.
		+ Khác nhau: Action bắt buộc phải đăng nhập, Entry point có thể không cần đăng nhập ('auth' = false).
	- Tạo một entry point:
		+ Truy cập vào file ./include/MVC/Controller/entry_point_registry.php
		+ Thêm một dòng khai báo entry point: 'test' => array('file' => 'custom/test_entry_point.php', 'auth' => false),
	
8.(task 5 - nâng cao) DBManagerFactory:
	- Truy cập vào DB thông qua biến $GLOBALS['db'], hoặc để ngắn gọn: $db = DBManagerFactory::getInstance();
	- Chạy một câu query:
		$result = $GLOBALS['db']->query($sql);
	- Fetch từng dòng kết quả:
		while($row = $GLOBALS['db']->fetchByAssoc($result) )
			{
				//Use $row['id'] to grab the id fields value
				$id = $row['id'];
			}
	- Select one:
		$sql = "SELECT name FROM accounts WHERE id = '{$id}'";
		$name = $GLOBALS['db']->getOne($sql);
	- Select limit, offset: (Lấy giới hạn <limit> dòng, kể từ dòng thứ <offset>)
		$result = $GLOBALS['db']->limitQuery($sql, $offset, $limit);
	- Count query:
		$bean = BeanFactory::newBean('Accounts');
		$sql = "SELECT * FROM accounts WHERE deleted = 0";
		$count_sql = $bean->create_list_count_query($sql);
		
9.(task 5 - nâng cao) SugarBean:
	- Create & Save:
		//Create bean
		$bean = BeanFactory::newBean($module);

		//Populate bean fields
		$bean->name = 'Example Record';

		//Save
		$bean->save();

		//Retrieve the bean id
		$record_id = $bean->id;
	- Create with specific Id:
		//Set the record id
		$bean->id = '38c90c70-7788-13a2-668d-513e2b8df5e1';
		$bean->new_with_id = true;
	- Kiểm tra record đã được tạo trong db hay chưa?
		if (!isset($bean->fetched_row['id']))
		{
			//new record
		}
		else
		{
			//existing record
		}
	- Trong logic hooks, kiểm tra xem reocrd đang là create new hay update:
		function hook_method($bean, $event, $arguments)
		{
			if (isset($arguments['isUpdate']) && $arguments['isUpdate'] == false)
			{
				//new record
			}
			else
			{
				//existing record
			}
		}
	- Retrieve by Unique field (dùng SugarQuery)
		require_once('include/SugarQuery/SugarQuery.php');
		$sugarQuery = new SugarQuery();

		//fetch the bean of the module to query
		$bean = BeanFactory::newBean('<modules>');

		//create first query
		$sql = new SugarQuery();
		$sql->select('id');
		$sql->from($bean);
		$sql->Where()->equals('<field>', '<unique value>');

		$result = $sql->execute();

		$count = count($result);

		if ($count == 0)
		{
			//no results were found
		}
		elseif ($count == 1)
		{
			//one result was found
			$bean = BeanFactory::getBean('<module>', $result[0]['id']);
		}
		else
		{
			//multiple results were found
		}
	- Update:
		//Retrieve bean
		$bean = BeanFactory::getBean($module, $id);

		//false: không chỉnh lại Date_modified, True: tự thêm Date_modified
		$bean->update_date_modified = false;

		//Fields to update
		$bean->name = 'Updated Name';

		//Save
		$bean->save();
	- Delete:
		//Retrieve bean
		$bean = BeanFactory::getBean($module, $id);

		//Set deleted to true
		$bean->deleted = 1;

		//Save
		$bean->save();
	- SugarQuery:
		+ Tạo query cơ bản, có AND, OR:
			//add fields to select
			$sugarQuery->select(array('id', 'name'));

			//fetch the bean of the module to query
			$bean = BeanFactory::newBean('Accounts');

			//add from table of the module we are querying
			$sugarQuery->from($bean);

			//add the where clause
			$sugarQuery->where()

			//add grouped or
			->queryOr()

			//where the assigned_user_id field is equal to 'seed_sally_id'
			->equals('assigned_user_id', 'seed_sally_id')

			//where the name field is starts with 'I'
			->starts('name', 'I');
			
			**SQL: 	SELECT accounts.id id, accounts.name name 
					FROM accounts 
					WHERE accounts.deleted = 0 
						AND (accounts.assigned_user_id = 'seed_sally_id' OR accounts.name LIKE 'I%')
		
		+ Join: $sugarQuery->join('contacts');
		+ LIMIT, OFFSET: 
			//set the offset
			$sugarQuery->offset(5);

			//set the limit
			$sugarQuery->limit(10);
		+ GROUP BY: 
			//add fields to select
			$sugarQuery->select(array('account_type', 'count(account_type)'));

			//fetch the bean of the module to query
			$bean = BeanFactory::newBean('Accounts');

			//add from table of the module we are querying
			$sugarQuery->from($bean);

			//add group by
			$sugarQuery->groupBy('account_type');
		+ EXECUTE:
			$result = $sugarQuery->execute();
	-  Truy xuất rela xuôi (Accounts->Contacts)
		//Load Account
		$bean = BeanFactory::getBean('Accounts', $id);

		//If relationship is loaded
		if ($bean->load_relationship('contacts'))
		{
			//Fetch related beans
			$relatedBeans = $bean->contacts->getBeans();
		}
	- Truy xuất rela ngược: (Contacts->Accounts)
		//Load Contact
		$bean = BeanFactory::getBean('Contacts', $id);

		//If relationship is loaded
		if ($bean->load_relationship('accounts'))
		{
			//Fetch related beans
			$relatedBeans = $bean->accounts->getBeans();

			$parentBean = false;
			if (!empty($relatedBeans))
			{
				//order the results
				reset($relatedBeans);

				//first record in the list is the parent
				$parentBean = current($relatedBeans);
			}
		}
	
10.(task 7 - nâng cao) Advanced report:
	- Custom query.
	- Data format.
	- Create Advanced report.

11.(task 8 - nâng cao) Custom dashlet:
	- Trong folder custom/modules/dashlet, tạo một folder mới tương ứng với tên dashlet mới, trong đó chứa 3 file theo mẫu của Sugar:
		+ <dashlet_name>.data.php - khai báo các field cho $searchField và $column.
		+ <dashlet_name>.meta.php - chứa hàm khởi tạo cho dashlet
		+ <dashlet_name>.php - kế thừa Dashlet của Sugar, sử dụng biến $searchField, $column của file <dashlet_name>.data.php để khai báo 
		những thuộc tính để hiển thị, tìm kiếm.
	- Khai báo các label tương ứng trong folder language.
	- Repair lại Sugar.

12.(task 9 - nâng cao) Custom query dashlet:
	- Custom trong file <dashlet_name>.php
	
13.(task 11 - nâng cao) Tạo một custom action:
	- Thêm một function trong file Controller của module đó:
		<?php
		require_once('include/MVC/Controller/SugarController.php');

		class AccountsController extends SugarController {

			function action_hello(){
				$this->view = 'hello';
			}
		}
		?>
	- Tạo một file view.<action>.php trong folder modules/views
		<?php
		require_once('include/MVC/View/views/view.detail.php');
		class ViewHello extends ViewDetail {
			function ViewHello(){
				parent::ViewDetail();
			}
			function display() {
				echo "hello";
			}
		}
		?>
	- Thêm một dòng trong code trong file action_view_map.php (tạo file nếu chưa có) để khai báo đường dẫn view mới:
		$action_view_map['hello'] = 'hello';

14. Accounts's field
	- Alternal Phone: SĐT khác.
	- Annual Revence: doanh số hàng năm
	- Industry: ngành kinh doanh
	- rating: đánh giá, dùng để so sánh các công ty với nhau
	- Ownership: quyền sở hữu
	- Employees: số nhân viên ở cty.
	- SIC code: xác định ngành nghề, khu vực (k dùng ở vN).
	
	- Salutation: Danh xưng (Mr,Ms,Mrs,..)
	
15. Opportunities Stage:
	- Prospecting: có tiềm năng
	- Qualification: Đánh giá
	- need Analysis: đưa ra những vấn để của cơ hội.
	- value propoisiton:
	
16. Cách tạo một action:
	- Tạo một file .php torng module rồi gọi action.
	- Tạo một file .php trong views, tạo file controller trong module rồi tạo hàm khai báo view action.
	- Tạo một file .php trong views, tạo file action_view_map.php để khai báo file view action.
	- Tạo một file action_file_map.php để khai báo file action.
	
17. Load, add relationship:
	https://community.sugarcrm.com/sugarcrm/topics/logic_hook_to_add_relationship
	
18. Quick edit trong Listview:
	- Mở file include/ListView/ListViewDeneric.tpl, tìm và sửa đoạn:
	{capture assign=action}{if $act}{$act}{else}EditView{/if}{/capture}
				<td width='2%' nowrap>
	                {if $pageData.rowAccess[$id].edit}
<!-- Edit by Lap Nguyen - OnlineCRM	                -->
                    {if $pageData.bean.moduleDir != 'Reports' && $pageData.bean.moduleDir != 'C_Ticket'}
                    <a title='{$editLinkString}' id="edit-{$rowData.ID}"
    href="index.php?module={$linkModule}&offset={$offset}&stamp={$pageData.stamp}&return_module={$linkModule}&action={$action}&record={$rowData.ID}"
                    >
                    {else}
                    <a title='{$editLinkString}' id="edit-{$rowData.ID}"
    href="index.php?module={$linkModule}&offset={$offset}&stamp={$pageData.stamp}&return_module={$linkModule}&action={$action}&record={$rowData.ID}"
    data-record='{$rowData.ID}' data-module='{$pageData.bean.moduleDir}'
     data-list = 'true' class="quickEdit"
                    >
                    {/if}
    <!-- END: Edit by Lap Nguyen - OnlineCRM-->                
	                    {capture name='tmp1' assign='alt_edit'}{sugar_translate label="LNK_EDIT"}{/capture}
	                    {sugar_getimage name="edit_inline.gif" attr='border="0" ' alt="$alt_edit"}</a>
	                {/if}
	            </td>
19. Ajax:
	$( document ).ready(function() {
    $(".relationship_type").on('change',function(){
       ajaxChangeRelationshipType($(this).attr('record_id'),$(this).val());
    });
});

//Ajax Change relationship
function ajaxChangeRelationshipType(contact_id, type){
    ajaxStatus.showStatus('Saving <img src="custom/include/images/loader32.gif" align="absmiddle" width="32">');
    $.ajax({
        url: "index.php?module=Contacts&action=saveRelationshipType&sugar_body_only=true",
        type: "POST",
        async: true,
        data:  
        {
            contact_id: contact_id,
            type: type,
        }, 
        dataType: "json",
        success: function(data){
        },       
    });
    ajaxStatus.hideStatus(); 
}
				
20. Ẩn field trong listview, popup listview (không phải xóa):
- Bỏ dòng "default => true"
- Thêm: 'usage' => 'query_only', (chỉ dùng field này để query, không hiển thị)
- Thêm: 'force_exist' => true,	(bắt buộc phải tồn tại)
	
21. Ẩn subpannel gốc
- Trong file view.detail.php thêm edit lại function:
function _displaySubPanels(){
            require_once ('include/SubPanel/SubPanelTiles.php');
            $subpanel = new SubPanelTiles($this->bean, $this->module);
            unset($subpanel->subpanel_definitions->layout_defs['subpanel_setup']['leads']);
            echo $subpanel->display();
        }
- Tham khảo file view.detail.php của Opportunities trong Gotadi.

22. Tìm global search 1 field bất kỳ:
- trong vardef, thêm dòng: 'unified_search' => true,
- Trong custom/modules/<module>/metadata/searchfields.php, thêm đoạn code:
	'pax_name' => 
  array (
    'query_type' => 'default',
  ),
  
22. Bỏ required một field trong editview:
						0 =>array(
                            'name' =>  'account_name',
                            'displayParams'=> array (
                                'required' => false,
                            )
                        ),
23. Ẩn hiện module trong giao diện tạo report: 
- Vào file: modules/Reports/metadata/reportmodulesdefs.php
- Comment module muốn hiện.
- Logout rồi vô lại.

24. Cách tạo field attach file.
- B1: tạo 4 field:
	'filename' =>
            array (
                'name' => 'filename',
                'vname' => 'LBL_FILENAME',
                'type' => 'varchar',
                'required'=>true,
                'importable' => 'required',
                'len' => '255',
                'studio' => 'false',
            ),
            'file_ext' =>
            array (
                'name' => 'file_ext',
                'vname' => 'LBL_FILE_EXTENSION',
                'type' => 'varchar',
                'len' => 100,
            ),
            'file_mime_type' =>
            array (
                'name' => 'file_mime_type',
                'vname' => 'LBL_MIME',
                'type' => 'varchar',
                'len' => '100',
            ),
            'uploadfile' =>
            array (
                'name'=>'uploadfile',
                'vname' => 'LBL_FILE_UPLOAD',
                'type' => 'file',
                'source' => 'non-db',
            ),
- B2: tạo file <C_module>_sugar.php trong modules/<C_module>, dán nội dung file mẫu.
- B3: gắn editviewdef bổ sung trong form: 'enctype' => 'multipart/form-data',
- B4: gắn field lên editviewdef.
