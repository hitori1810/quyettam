<?PHP
    /*********************************************************************************
    * By installing or using this file, you are confirming on behalf of the entity
    * subscribed to the SugarCRM Inc. product ("Company") that Company is bound by
    * the SugarCRM Inc. Master Subscription Agreement (“MSA”), which is viewable at:
    * http://www.sugarcrm.com/master-subscription-agreement
    *
    * If Company is not bound by the MSA, then by installing or using this file
    * you are agreeing unconditionally that Company will be bound by the MSA and
    * certifying that you have authority to bind Company accordingly.
    *
    * Copyright (C) 2004-2013 SugarCRM Inc.  All rights reserved.
    ********************************************************************************/

    /**
    * THIS CLASS IS GENERATED BY MODULE BUILDER
    * PLEASE DO NOT CHANGE THIS CLASS
    * PLACE ANY CUSTOMIZATIONS IN C_Tour
    */


    class C_Tour_sugar extends Basic {
        var $new_schema = true;
        var $module_dir = 'C_Tour';
        var $object_name = 'C_Tour';
        var $table_name = 'c_tour';
        var $importable = true;
        var $id;
        var $name;
        var $date_entered;
        var $date_modified;
        var $modified_user_id;
        var $modified_by_name;
        var $created_by;
        var $created_by_name;
        var $description;
        var $deleted;
        var $created_by_link;
        var $modified_user_link;
        var $team_id;
        var $team_set_id;
        var $team_count;
        var $team_name;
        var $team_link;
        var $team_count_link;
        var $teams;
        var $assigned_user_id;
        var $assigned_user_name;
        var $assigned_user_link;
        var $tour_name;
        var $option_tour;
        var $days;
        var $night;
        var $price_adult;
        var $currency_id;
        var $price_chd;
        var $price_infant;
        var $start_date;
        var $end_date;
        var $contact_phone;

        /**
        * This is a depreciated method, please start using __construct() as this method will be removed in a future version
        *
        * @see __construct
        * @depreciated
        */
        function C_Tour_sugar(){
            self::__construct();
        }

        public function __construct(){
            parent::__construct();
            parent::SugarBean();
            $this->emailAddress = new SugarEmailAddress();
        }

        public function bean_implements($interface){
            switch($interface){
                case 'ACL': return true;
            }
            return false;
        }
        public function save($check_notify=false)
        {
            if (!empty($this->uploadfile)) {
                $this->filename = $this->uploadfile;
            }
            //If we are saving due to relationship changes, don't bother trying to update the emails
            if(!empty($GLOBALS['resavingRelatedBeans']))
            {
                parent::save($check_notify);
                return $this->id;
            }
            $this->add_address_streets('primary_address_street');
            $this->add_address_streets('alt_address_street');
            $ori_in_workflow = empty($this->in_workflow) ? false : true;
            $this->emailAddress->handleLegacySave($this, $this->module_dir);
            // bug #39188 - store emails state before workflow make any changes
            $this->emailAddress->stash($this->id, $this->module_dir);
            parent::save($check_notify);
            // $this->emailAddress->evaluateWorkflowChanges($this->id, $this->module_dir);
            $override_email = array();
            if(!empty($this->email1_set_in_workflow)) {
                $override_email['emailAddress0'] = $this->email1_set_in_workflow;
            }
            if(!empty($this->email2_set_in_workflow)) {
                $override_email['emailAddress1'] = $this->email2_set_in_workflow;
            }
            if(!isset($this->in_workflow)) {
                $this->in_workflow = false;
            }
            if($ori_in_workflow === false || !empty($override_email)){
                $this->emailAddress->save($this->id, $this->module_dir, $override_email,'','','','',$this->in_workflow);
                // $this->emailAddress->applyWorkflowChanges($this->id, $this->module_dir);
            }
            return $this->id;
        }

        public function fill_in_additional_detail_fields()
        {
            global $app_list_strings;
            global $img_name;
            global $img_name_bare;

            $this->uploadfile = $this->filename;

            // Bug 41453 - Make sure we call the parent method as well
            parent::fill_in_additional_detail_fields();

            if (!$this->file_ext) {
                $img_name = SugarThemeRegistry::current()->getImageURL(strtolower($this->file_ext)."_image_inline.gif");
                $img_name_bare = strtolower($this->file_ext)."_image_inline";
            }

            //set default file name.
            if (!empty ($img_name) && file_exists($img_name)) {
                $img_name = $img_name_bare;
            }
            else {
                $img_name = "def_image_inline"; //todo change the default image.
            }
            $this->file_url_noimage = $this->id;

            if(!empty($this->status_id)) {
                $this->status = $app_list_strings['document_status_dom'][$this->status_id];
            }
        }


        /**
        * Method to delete an attachment
        *
        * @param string $isduplicate
        * @return bool
        */
        public function deleteAttachment($isduplicate = "false")
        {
            if ($this->ACLAccess('edit')) {
                if ($isduplicate == "true") {
                    return true;
                }
                $removeFile = "upload://{$this->id}";
            }
            if (file_exists($removeFile)) {
                if (!unlink($removeFile)) {
                    $GLOBALS['log']->error("*** Could not unlink() file: [ {$removeFile} ]");
                } else {
                    $this->uploadfile = '';$this->uploadfile = '';
                    $this->filename = '';
                    $this->file_mime_type = '';
                    $this->file_ext = '';
                    $this->save();
                    return true;
                }
            } else {
                $this->uploadfile = '';
                $this->filename = '';
                $this->file_mime_type = '';
                $this->file_ext = '';
                $this->save();
                return true;
            }
            return false;
        }
    }
?>